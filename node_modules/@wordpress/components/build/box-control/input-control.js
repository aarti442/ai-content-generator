/* wp:polyfill */
"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = BoxInputControl;
var _compose = require("@wordpress/compose");
var _i18n = require("@wordpress/i18n");
var _tooltip = _interopRequireDefault(require("../tooltip"));
var _utils = require("../unit-control/utils");
var _utils2 = require("./utils");
var _boxControlStyles = require("./styles/box-control-styles");
var _jsxRuntime = require("react/jsx-runtime");
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const noop = () => {};
function getSidesToModify(side, sides, isAlt) {
  const allowedSides = (0, _utils2.getAllowedSides)(sides);
  let modifiedSides = [];
  switch (side) {
    case 'all':
      modifiedSides = ['top', 'bottom', 'left', 'right'];
      break;
    case 'horizontal':
      modifiedSides = ['left', 'right'];
      break;
    case 'vertical':
      modifiedSides = ['top', 'bottom'];
      break;
    default:
      modifiedSides = [side];
  }
  if (isAlt) {
    switch (side) {
      case 'top':
        modifiedSides.push('bottom');
        break;
      case 'bottom':
        modifiedSides.push('top');
        break;
      case 'left':
        modifiedSides.push('left');
        break;
      case 'right':
        modifiedSides.push('right');
        break;
    }
  }
  return modifiedSides.filter(s => allowedSides.has(s));
}
function BoxInputControl({
  __next40pxDefaultSize,
  onChange = noop,
  onFocus = noop,
  values,
  selectedUnits,
  setSelectedUnits,
  sides,
  side,
  ...props
}) {
  var _CUSTOM_VALUE_SETTING, _CUSTOM_VALUE_SETTING2;
  const defaultValuesToModify = getSidesToModify(side, sides);
  const handleOnFocus = event => {
    onFocus(event, {
      side
    });
  };
  const handleOnChange = nextValues => {
    onChange(nextValues);
  };
  const handleOnValueChange = (next, extra) => {
    const nextValues = {
      ...values
    };
    const isNumeric = next !== undefined && !isNaN(parseFloat(next));
    const nextValue = isNumeric ? next : undefined;
    const modifiedSides = getSidesToModify(side, sides,
    /**
     * Supports changing pair sides. For example, holding the ALT key
     * when changing the TOP will also update BOTTOM.
     */
    // @ts-expect-error - TODO: event.altKey is only present when the change event was
    // triggered by a keyboard event. Should this feature be implemented differently so
    // it also works with drag events?
    !!extra?.event.altKey);
    modifiedSides.forEach(modifiedSide => {
      nextValues[modifiedSide] = nextValue;
    });
    handleOnChange(nextValues);
  };
  const handleOnUnitChange = next => {
    const newUnits = {
      ...selectedUnits
    };
    defaultValuesToModify.forEach(modifiedSide => {
      newUnits[modifiedSide] = next;
    });
    setSelectedUnits(newUnits);
  };
  const mergedValue = (0, _utils2.getMergedValue)(values, defaultValuesToModify);
  const hasValues = (0, _utils2.isValuesDefined)(values);
  const isMixed = hasValues && defaultValuesToModify.length > 1 && (0, _utils2.isValueMixed)(values, defaultValuesToModify);
  const [parsedQuantity, parsedUnit] = (0, _utils.parseQuantityAndUnitFromRawValue)(mergedValue);
  const computedUnit = hasValues ? parsedUnit : selectedUnits[defaultValuesToModify[0]];
  const generatedId = (0, _compose.useInstanceId)(BoxInputControl, 'box-control-input');
  const inputId = [generatedId, side].join('-');
  const isMixedUnit = defaultValuesToModify.length > 1 && mergedValue === undefined && defaultValuesToModify.some(s => selectedUnits[s] !== computedUnit);
  const usedValue = mergedValue === undefined && computedUnit ? computedUnit : mergedValue;
  const mixedPlaceholder = isMixed || isMixedUnit ? (0, _i18n.__)('Mixed') : undefined;
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_boxControlStyles.InputWrapper, {
    expanded: true,
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_boxControlStyles.FlexedBoxControlIcon, {
      side: side,
      sides: sides
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_tooltip.default, {
      placement: "top-end",
      text: _utils2.LABELS[side],
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_boxControlStyles.StyledUnitControl, {
        ...props,
        __shouldNotWarnDeprecated36pxSize: true,
        __next40pxDefaultSize: __next40pxDefaultSize,
        className: "component-box-control__unit-control",
        id: inputId,
        isPressEnterToChange: true,
        disableUnits: isMixed || isMixedUnit,
        value: usedValue,
        onChange: handleOnValueChange,
        onUnitChange: handleOnUnitChange,
        onFocus: handleOnFocus,
        label: _utils2.LABELS[side],
        placeholder: mixedPlaceholder,
        hideLabelFromVision: true
      })
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_boxControlStyles.FlexedRangeControl, {
      __nextHasNoMarginBottom: true,
      __next40pxDefaultSize: __next40pxDefaultSize,
      __shouldNotWarnDeprecated36pxSize: true,
      "aria-controls": inputId,
      label: _utils2.LABELS[side],
      hideLabelFromVision: true,
      onChange: newValue => {
        handleOnValueChange(newValue !== undefined ? [newValue, computedUnit].join('') : undefined);
      },
      min: 0,
      max: (_CUSTOM_VALUE_SETTING = _utils2.CUSTOM_VALUE_SETTINGS[computedUnit !== null && computedUnit !== void 0 ? computedUnit : 'px']?.max) !== null && _CUSTOM_VALUE_SETTING !== void 0 ? _CUSTOM_VALUE_SETTING : 10,
      step: (_CUSTOM_VALUE_SETTING2 = _utils2.CUSTOM_VALUE_SETTINGS[computedUnit !== null && computedUnit !== void 0 ? computedUnit : 'px']?.step) !== null && _CUSTOM_VALUE_SETTING2 !== void 0 ? _CUSTOM_VALUE_SETTING2 : 0.1,
      value: parsedQuantity !== null && parsedQuantity !== void 0 ? parsedQuantity : 0,
      withInputField: false
    })]
  }, `box-control-${side}`);
}
//# sourceMappingURL=input-control.js.map